# CIS 9.2 Review User and Group Settings
# CIS 9.2.1 Ensure Password Fields are Not Empty
### - cis-level-1
Audit:
Run the following command and verify that no output is returned:
# /bin/cat /etc/shadow | /bin/awk -F: '($2 == "" ) { print $1 " does not have a password "}'
Remediation:
If any accounts in the /etc/shadow file do not have a password, run the following
command to lock the account until it can be determined why it does not have a password:
# /usr/bin/passwd -l <username>
Also, check to see if the account is logged in and investigate what it is being used for to
determine if it needs to be forced off


# CIS 9.2.2 Verify No Legacy "+" Entries Exist in /etc/passwd File
### - cis-level-1
/bin/grep '^+:' /etc/passwd 
Delete these entries if they exist.


# CIS 9.2.3 Verify No Legacy "+" Entries Exist in /etc/shadow File
### - cis-level-1
/bin/grep '^+:' /etc/shadow

Remediation:
Delete these entries if they exist.

# CIS 9.2.4 Verify No Legacy "+" Entries Exist in /etc/group File
### - cis-level-1
# /bin/grep '^+:' /etc/group

Remediation:
Delete these entries if they exist.

# CIS 9.2.5 Verify No UID 0 Accounts Exist Other Than root
### - cis-level-1
/bin/cat /etc/passwd | /bin/awk -F: '($3 == 0) { print $1 }' root

Remediation:
Delete any other entries that are displayed.

# CIS 9.2.6 Ensure root PATH Integrity
### - cis-level-1
Audit:
#!/bin/bash
if [ "`echo $PATH | /bin/grep :: `" != "" ]; then
echo "Empty Directory in PATH (::)"
158 | P a g e
fi
if [ "`echo $PATH | bin/grep :$`" != "" ]; then
echo "Trailing : in PATH"
fi
p=`echo $PATH | /bin/sed -e 's/::/:/' -e 's/:$//' -e 's/:/ /g'`
set -- $p
while [ "$1" != "" ]; do
if [ "$1" = "." ]; then
echo "PATH contains ."
shift
continue
fi
if [ -d $1 ]; then
dirperm=`/bin/ls -ldH $1 | /bin/cut -f1 -d" "`
if [ `echo $dirperm | /bin/cut -c6 ` != "-" ]; then
echo "Group Write permission set on directory $1"
fi
if [ `echo $dirperm | /bin/cut -c9 ` != "-" ]; then
echo "Other Write permission set on directory $1"
fi
dirown=`ls -ldH $1 | awk '{print $3}'`
if [ "$dirown" != "root" ] ; then
echo $1 is not owned by root
fi
else
echo $1 is not a directory
fi
shift
done

Remediation:
Correct or justify any items discovered in the Audit step

# CIS 9.2.7 Check Permissions on User Home Directories
### - cis-level-1
Audit:
159 | P a g e
#!/bin/bash
for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|halt|sync|shutdown)' |\
/bin/awk -F: '($8 == "PS" && $7 != "/sbin/nologin") { print $6 }'`; do
dirperm=`/bin/ls -ld $dir | /bin/cut -f1 -d" "`
if [ `echo $dirperm | /bin/cut -c6 ` != "-" ]; then
echo "Group Write permission set on directory $dir"
fi
if [ `echo $dirperm | /bin/cut -c8 ` != "-" ]; then
echo "Other Read permission set on directory $dir"
fi
if [ `echo $dirperm | /bin/cut -c9 ` != "-" ]; then
echo "Other Write permission set on directory $dir"
fi
if [ `echo $dirperm | /bin/cut -c10 ` != "-" ]; then
echo "Other Execute permission set on directory $dir"
fi
done

Remediation:
Making global modifications to user home directories without alerting the user community
can result in unexpected outages and unhappy users. Therefore, it is recommended that a
monitoring policy be established to report user file permissions and determine the action
to be taken in accordance with site policy

# CIS 9.2.8 Check User Dot File Permissions
### - cis-level-1
Audit:
#!/bin/bash
for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|sync|halt|shutdown)' |
/bin/awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
for file in $dir/.[A-Za-z0-9]*; do
if [ ! -h "$file" -a -f "$file" ]; then
fileperm=`/bin/ls -ld $file | /bin/cut -f1 -d" "`
160 | P a g e
if [ `echo $fileperm | /bin/cut -c6 ` != "-" ]; then
echo "Group Write permission set on file $file"
fi
if [ `echo $fileperm | /bin/cut -c9 ` != "-" ]; then
echo "Other Write permission set on file $file"
fi
fi
done
done

Remediation:
Making global modifications to users' files without alerting the user community can result
in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring
policy be established to report user dot file permissions and determine the action to be
taken in accordance with site policy.

# CIS 9.2.9 Check Permissions on User .netrc Files
### - cis-level-1
Audit:
#!/bin/bash
for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|sync|halt|shutdown)' |\
/bin/awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
for file in $dir/.netrc; do
if [ ! -h "$file" -a -f "$file" ]; then
fileperm=`/bin/ls -ld $file | /bin/cut -f1 -d" "`
if [ `echo $fileperm | /bin/cut -c5 ` != "-" ]
then
echo "Group Read set on $file"
fi
if [ `echo $fileperm | /bin/cut -c6 ` != "-" ]
then
echo "Group Write set on $file"
fi
161 | P a g e
if [ `echo $fileperm | /bin/cut -c7 ` != "-" ]
then
echo "Group Execute set on $file"
fi
if [ `echo $fileperm | /bin/cut -c8 ` != "-" ]
then
echo "Other Read set on $file"
fi
if [ `echo $fileperm | /bin/cut -c9 ` != "-" ]
then
echo "Other Write set on $file"
fi
if [ `echo $fileperm | /bin/cut -c10 ` != "-" ]
then
echo "Other Execute set on $file"
fi
fi
done
done
Remediation:
Making global modifications to users' files without alerting the user community can result
in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring
policy be established to report user .netrc file permissions and determine the action to be
taken in accordance with site policy

# CIS 9.2.10 Check for Presence of User .rhosts Files
### - cis-level-1
Audit:
#!/bin/bash
for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|halt|sync|shutdown)' |\
/bin/awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
for file in $dir/.rhosts; do
if [ ! -h "$file" -a -f "$file" ]; then
echo ".rhosts file in $dir"
162 | P a g e
fi done
done

Remediation:
If any users have .rhosts files determine why they have them.


# CIS 9.2.11 Check Groups in /etc/passwd
### - cis-level-1
Audit:
Create a script as shown below and run it:
#!/bin/bash
for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
grep -q -P "^.*?:x:$i:" /etc/group
if [ $? -ne 0 ]; then
echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
fi
done
Remediation:
Analyze the output of the Audit step above and perform the appropriate action to correct
any discrepancies found.

# CIS 9.2.12 Check That Users Are Assigned Valid Home Directories
### - cis-level-1
Audit:
This script checks to make sure that home directories assigned in the /etc/passwd file
exist.
#!/bin/bash
cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | while read user uid dir; do
if [ $uid -ge 1000 -a ! -d "$dir" -a $user != "nfsnobody" ]; then
echo "The home directory ($dir) of user $user does not exist."
fi
done

Remediation:
If any users' home directories do not exist, create them and make sure the respective user
owns the directory. Users without assigned should be removed or assigned a home
directory as appropriate.

# CIS 9.2.13 Check User Home Directory Ownership
### - cis-level-1
Audit:
This script checks to make sure users own the home directory they are assigned to in the
/etc/passwd file.
164 | P a g e
#!/bin/bash
cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | while read user uid dir; do
if [ $uid -ge 1000 -a -d "$dir" -a $user != "nfsnobody" ]; then
owner=$(stat -L -c "%U" "$dir")
if [ "$owner" != "$user" ]; then
echo "The home directory ($dir) of user $user is owned by $owner."
fi
fi
done
Remediation:
Change the ownership any home directories that are not owned by the defined user to the
correct user.

# CIS 9.2.14 Check for Duplicate UIDs
### - cis-level-1
Audit:
This script checks to make sure all UIDs in the /etc/passwd file are unique.
#!/bin/bash
echo "The Output for the Audit of Control 9.2.15 - Check for Duplicate UIDs is"
/bin/cat /etc/passwd | /bin/cut -f3 -d":" | /bin/sort -n | /usr/bin/uniq -c |\
while read x ; do
[ -z "${x}" ] && break
set - $x
if [ $1 -gt 1 ]; then
users=`/bin/gawk -F: '($3 == n) { print $1 }' n=$2 \
/etc/passwd | /usr/bin/xargs`
echo "Duplicate UID ($2): ${users}"
fi
done

Remediation:
Based on the results of the script, establish unique UIDs and review all files owned by the
shared UID to determine which UID they are supposed to belong to.


# CIS 9.2.15 Check for Duplicate GIDs
### - cis-level-1
Audit:
This script checks to make sure all GIDs in the /etc/group file are unique. You can also use
the /usr/sbin/grpck command to check for other inconsistencies in the /etc/group file.
#!/bin/bash
echo "The Output for the Audit of Control 9.2.16 - Check for Duplicate GIDs is"
/bin/cat /etc/group | /bin/cut -f3 -d":" | /bin/sort -n | /usr/bin/uniq -c |\
while read x ; do
[ -z "${x}" ] && break
set - $x
if [ $1 -gt 1 ]; then
grps=`/bin/gawk -F: '($3 == n) { print $1 }' n=$2 \
/etc/group | xargs`
echo "Duplicate GID ($2): ${grps}"
fi
done

Remediation:
Based on the results of the script, establish unique GIDs and review all files owned by the
shared GID to determine which group they are supposed to belong to.

# CIS 9.2.16 Check That Reserved UIDs Are Assigned to System Accounts
### - cis-level-1
Audit:
This script checks to make sure that "reserved" UIDs (0-499 range) are not assigned to
non-system (default) accounts.
#!/bin/bash
defUsers="root bin daemon adm lp sync shutdown halt mail news uucp operator games
gopher ftp nobody nscd vcsa rpc mailnull smmsp pcap ntp dbus avahi sshd rpcuser
nfsnobody haldaemon avahi-autoipd distcache apache oprofile webalizer dovecot squid
named xfs gdm sabayon usbmuxd rtkit abrt saslauth pulse postfix tcpdump"
/bin/cat /etc/passwd |\
/bin/awk -F: '($3 < 1000) { print $1" "$3 }' |\
while read user uid; do
found=0
for tUser in ${defUsers}
do
if [ ${user} = ${tUser} ]; then
found=1
fi
done
if [ $found -eq 0 ]; then
echo "User $user has a reserved UID ($uid)."
fi
done
Remediation:
Based on the results of the script, change any UIDs that are in the reserved range to one
that is in the user range. Review all files owned by the reserved UID to determine which
UID they are supposed to belong to.


# CIS 9.2.17 Check for Duplicate User Names
### - cis-level-1
Audit:
This script checks to make sure all user names in the /etc/passwd file are unique.
#!/bin/bash
echo "The Output for the Audit of Control 9.2.18 - Check for Duplicate User Names is"
cat /etc/passwd | cut -f1 -d":" | /bin/sort -n | /usr/bin/uniq -c |\
while read x ; do
[ -z "${x}" ] && break
set - $x
if [ $1 -gt 1 ]; then
uids=`/bin/gawk -F: '($1 == n) { print $3 }' n=$2 \
/etc/passwd | xargs`
echo "Duplicate User Name ($2): ${uids}"
fi
done
Remediation:
Based on the results of the script, establish unique user names for the users. File
ownerships will automatically reflect the change as long as the users have unique UIDs.


# CIS 9.2.18 Check for Duplicate Group Names
### - cis-level-1
Audit:
This script checks to make sure all group names in the /etc/group file are unique.
#!/bin/bash
echo "The Output for the Audit of Control 9.2.19 - Check for Duplicate Group Names is"
cat /etc/group | cut -f1 -d":" | /bin/sort -n | /usr/bin/uniq -c |\
while read x ; do
[ -z "${x}" ] && break
set - $x
if [ $1 -gt 1 ]; then
gids=`/bin/gawk -F: '($1 == n) { print $3 }' n=$2 \
/etc/group | xargs`
echo "Duplicate Group Name ($2): ${gids}"
fi
done

Remediation:
Based on the results of the script, establish unique names for the user groups. File group
ownerships will automatically reflect the change as long as the groups have unique GIDs.

# CIS 9.2.19 Check for Presence of User .netrc Files
### - cis-level-1
Audit:
#!/bin/bash
for dir in `/bin/cat /etc/passwd |\
/bin/awk -F: '{ print $6 }'`; do
if [ ! -h "$dir/.netrc" -a -f "$dir/.netrc" ]; then
echo ".netrc file $dir/.netrc exists"
fi
done

Remediation:
Making global modifications to users' files without alerting the user community can result
in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring
policy be established to report user .netrc files and determine the action to be taken in
accordance with site policy

# CIS 9.2.20 Check for Presence of User .forward Files
### - cis-level-1
Audit:
This script checks for the presence of .forward files that may be in violation of the site
security policy.
#!/bin/bash
for dir in `/bin/cat /etc/passwd |\
/bin/awk -F: '{ print $6 }'`; do
if [ ! -h "$dir/.forward" -a -f "$dir/.forward" ]; then
echo ".forward file $dir/.forward exists"
fi
done

Remediation:
Making global modifications to users' files without alerting the user community can result
in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring
policy be established to report user .forward files and determine the action to be taken in
accordance with site policy.

# CIS 
### - cis-level-1